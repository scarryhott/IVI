/-
  Harder direction (BN ‚áí IVI-energy=0 for linear invariances), abstract form.

  Works over any normed space H over ùïú = ‚Ñù or ‚ÑÇ.
  You instantiate:
    ‚Ä¢ H   := your Hilbert space (e.g. L^2(0,1))
    ‚Ä¢ V   := the submodule (span of your BN/IVI generators)
    ‚Ä¢ x0  := the target vector (the constant-1 function)
    ‚Ä¢ L   := a continuous linear functional encoding the IVI invariance
    ‚Ä¢ g‚ààV with L g ‚â† 0 (a witness direction to correct L)

  Result: for every Œµ>0 you can hit the affine slice {f‚ààV | L f = L x0}
  within Œµ of x0. Hence x0 ‚àà closure(slice) and the "energy" infimum is 0.
-/

import Mathlib.Analysis.NormedSpace.Basic
import Mathlib.Analysis.NormedSpace.OperatorNorm
import Mathlib.Topology.Algebra.Module
import Mathlib.Topology.Algebra.Module.Basic

open scoped Topology
open Filter

universe u v

variable {ùïú : Type u} [IsROrC ùïú]
variable {H : Type v} [NormedAddCommGroup H] [NormedSpace ùïú H]

/-- The IVI affine slice for a linear invariance `L`, through the point `x0`. -/
def affineSlice (V : Submodule ùïú H) (L : ContinuousLinearMap ùïú H ùïú) (x0 : H) : Set H :=
  { f : H | f ‚àà (V : Set H) ‚àß L f = L x0 }

/--
BN-side approximation hypothesis, metric form:
`x0 ‚àà closure (V : Set H)` is equivalent to
`‚àÄ Œµ>0, ‚àÉ v‚ààV, ‚Äñx0 - v‚Äñ < Œµ` in a metric space.

We take this as an input lemma to keep dependencies light.
-/
def BNApprox (V : Submodule ùïú H) (x0 : H) : Prop :=
  ‚àÄ {Œµ : ‚Ñù}, Œµ > 0 ‚Üí ‚àÉ v : H, v ‚àà (V : Set H) ‚àß ‚Äñx0 - v‚Äñ < Œµ

/--
**Harder direction (abstract, linear-invariance version).**

Assume:
  * `BNApprox V x0`: the BN closure condition (metric form).
  * `g ‚àà V` with `L g ‚â† 0`.

Then for every `Œµ>0`, there exists `f ‚àà V` with `L f = L x0` and `‚Äñx0 - f‚Äñ < Œµ`.

This shows `x0 ‚àà closure (affineSlice V L x0)`, hence the IVI "energy" on that slice is 0.
-/
theorem approx_in_affineSlice_of_BN
    (V : Submodule ùïú H)
    (L : ContinuousLinearMap ùïú H ùïú)
    {x0 g : H}
    (hBN : BNApprox (ùïú:=ùïú) V x0)
    (hgV : g ‚àà (V : Set H))
    (hLg : L g ‚â† 0) :
    ‚àÄ {Œµ : ‚Ñù}, Œµ > 0 ‚Üí ‚àÉ f : H, f ‚àà affineSlice V L x0 ‚àß ‚Äñx0 - f‚Äñ < Œµ := by
  classical
  -- Constants for the error bound:
  -- We will ensure ‚Äñx0 - v‚Äñ < Œµ / K so that ‚Äñx0 - f‚Äñ ‚â§ Œµ.
  let denom : ‚Ñù := ‚ÄñL g‚Äñ
  have hdenom : 0 < denom := by
    -- since L g ‚â† 0 in ùïú, its norm is strictly positive
    have : ‚Äñ(L g)‚Äñ ‚â† 0 := by
      simpa [IsROrC.norm_eq_abs] using congrArg IsROrC.abs hLg
    exact lt_of_le_of_ne' (by exact norm_nonneg _) this

  -- Operator norm of L (‚ÄñL‚Äñ), used in the bound |Œ±| ‚â§ ‚ÄñL‚Äñ ‚Äñx0 - v‚Äñ / ‚ÄñL g‚Äñ
  let K : ‚Ñù := 1 + (‚ÄñL‚Äñ * ‚Äñg‚Äñ) / denom
  have hKpos : 0 < K := by
    have : 0 ‚â§ (‚ÄñL‚Äñ * ‚Äñg‚Äñ) / denom := by
      have : 0 ‚â§ ‚ÄñL‚Äñ * ‚Äñg‚Äñ := by
        exact mul_nonneg (norm_nonneg _) (norm_nonneg _)
      exact div_nonneg this (le_of_lt hdenom)
    have : 1 ‚â§ K := by
      have : 0 ‚â§ (‚ÄñL‚Äñ * ‚Äñg‚Äñ) / denom := by
        have : 0 ‚â§ ‚ÄñL‚Äñ * ‚Äñg‚Äñ := by
          exact mul_nonneg (norm_nonneg _) (norm_nonneg _)
        exact div_nonneg this (le_of_lt hdenom)
      simpa [K] using add_le_add_left this 1
    exact lt_of_le_of_lt (show (0:‚Ñù) < 1 by decide) (lt_of_le_of_ne this (by simp [K]))

  intro Œµ hŒµ
  -- Choose v‚ààV with ‚Äñx0 - v‚Äñ < Œµ / K by the BN approximation.
  have hŒ¥ : Œµ / K > 0 := by
    exact div_pos hŒµ hKpos
  obtain ‚ü®v, hvV, hv‚ü© := hBN hŒ¥

  -- Define Œ± := (L x0 - L v) / (L g) and f := v + Œ± ‚Ä¢ g.
  -- This corrects L so that L f = L x0 while staying in V.
  let Œ± : ùïú := (L x0 - L v) / (L g)
  have f_in_V : v + Œ± ‚Ä¢ g ‚àà (V : Set H) := by
    -- V is a submodule: closed under + and ‚Ä¢
    have hvV' : v ‚àà V := by simpa using hvV
    have hgV' : g ‚àà V := by simpa using hgV
    -- use submodule closure properties
    exact
      (V.add_mem hvV' (V.smul_mem (Œ±) hgV')).elim
  -- L f = L (v + Œ± ‚Ä¢ g) = L v + Œ± * L g = L x0
  have Lf_eq : L (v + Œ± ‚Ä¢ g) = L x0 := by
    simp [map_add, map_smul, Œ±, mul_comm, mul_left_comm, mul_assoc, sub_eq_add_neg,
      IsROrC.div_eq_inv_mul, inv_mul_cancel‚ÇÄ hLg]

  -- Now bound the distance: ‚Äñx0 - f‚Äñ ‚â§ ‚Äñx0 - v‚Äñ + |Œ±| ‚Äñg‚Äñ
  -- and |Œ±| ‚â§ ‚ÄñL‚Äñ ‚Äñx0 - v‚Äñ / ‚ÄñL g‚Äñ
  have alpha_bound :
      ‚ÄñŒ±‚Äñ ‚â§ (‚ÄñL‚Äñ * ‚Äñx0 - v‚Äñ) / denom := by
    -- |Œ±| = |L(x0) - L(v)| / |L(g)| ‚â§ ‚ÄñL‚Äñ‚Äñx0 - v‚Äñ / ‚ÄñL g‚Äñ
    have : ‚ÄñL x0 - L v‚Äñ ‚â§ ‚ÄñL‚Äñ * ‚Äñx0 - v‚Äñ := by
      -- use operator norm inequality
      have := L.opNorm_bound (x0 - v)
      -- opNorm_bound: ‚ÄñL z‚Äñ ‚â§ ‚ÄñL‚Äñ ‚Äñz‚Äñ; rewrite
      simpa [map_sub] using this
    have : ‚Äñ(L x0 - L v)‚Äñ / denom ‚â§ (‚ÄñL‚Äñ * ‚Äñx0 - v‚Äñ) / denom := by
      exact div_le_div_of_le_of_nonneg this (le_of_lt hdenom)
    -- convert ‚ÄñŒ±‚Äñ = ‚Äñ(L x0 - L v) / (L g)‚Äñ to the real-norm inequality above
    have hŒ± : ‚ÄñŒ±‚Äñ = ‚ÄñL x0 - L v‚Äñ / denom := by
      -- over IsROrC, ‚Äña / b‚Äñ = ‚Äña‚Äñ / ‚Äñb‚Äñ
      simp [Œ±, norm_div]
    simpa [hŒ±]

  -- Triangle bound to finish
  refine ‚ü®v + Œ± ‚Ä¢ g, ?_, ?_‚ü©
  ¬∑ -- membership in the affine slice
    refine And.intro f_in_V ?_
    simpa [Lf_eq]
  ¬∑
    -- ‚Äñx0 - (v + Œ± ‚Ä¢ g)‚Äñ ‚â§ ‚Äñx0 - v‚Äñ + ‚ÄñŒ±‚Äñ‚Äñg‚Äñ ‚â§ ‚Äñx0 - v‚Äñ + (‚ÄñL‚Äñ‚Äñx0 - v‚Äñ/‚ÄñL g‚Äñ)‚Äñg‚Äñ
    have := calc
      ‚Äñx0 - (v + Œ± ‚Ä¢ g)‚Äñ
          = ‚Äñ(x0 - v) - Œ± ‚Ä¢ g‚Äñ := by abel_nf
      _ ‚â§ ‚Äñx0 - v‚Äñ + ‚ÄñŒ± ‚Ä¢ g‚Äñ := norm_sub_le _ _
      _ ‚â§ ‚Äñx0 - v‚Äñ + ‚ÄñŒ±‚Äñ * ‚Äñg‚Äñ := by
            simpa [norm_smul]
      _ ‚â§ ‚Äñx0 - v‚Äñ + ((‚ÄñL‚Äñ * ‚Äñx0 - v‚Äñ) / denom) * ‚Äñg‚Äñ := by
            gcongr
            exact alpha_bound
      _ = ‚Äñx0 - v‚Äñ * (1 + (‚ÄñL‚Äñ * ‚Äñg‚Äñ) / denom) := by
            ring_nf [mul_comm, mul_left_comm, mul_assoc, div_mul_eq_mul_div, add_comm, add_left_comm, add_assoc]
      _ < (Œµ / K) * K := by
            have hv' : ‚Äñx0 - v‚Äñ < Œµ / K := hv
            have : (1 + (‚ÄñL‚Äñ * ‚Äñg‚Äñ) / denom) = K := rfl
            simpa [this] using (mul_lt_mul_of_pos_right hv' hKpos)
      _ = Œµ := by
            field_simp [K, ne_of_gt hKpos]
    exact this
